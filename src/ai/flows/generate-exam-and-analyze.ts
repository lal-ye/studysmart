// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates an exam, grades it, and analyzes the results to provide a personalized study plan.
 *
 * - generateExamAndAnalyze - A function that orchestrates the exam generation, grading, and analysis process.
 * - GenerateExamAndAnalyzeInput - The input type for the generateExamAndAnalyze function.
 * - GenerateExamAndAnalyzeOutput - The return type for the generateExamAndAnalyze function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {searchArticles} from '@/services/search-articles';

const GenerateExamAndAnalyzeInputSchema = z.object({
  courseMaterial: z
    .string()
    .describe('The course material in PDF or text format.'),
  numberOfQuestions: z
    .number()
    .default(70)
    .describe('The desired number of questions in the exam.'),
});

export type GenerateExamAndAnalyzeInput = z.infer<
  typeof GenerateExamAndAnalyzeInputSchema
>;

const ExamQuestionSchema = z.object({
  question: z.string().describe('The exam question.'),
  options: z.array(z.string()).describe('The multiple-choice options.'),
  correctAnswer: z.string().describe('The correct answer to the question.'),
  topic: z.string().describe('The topic of the question in the course.'),
});

const ExamResultSchema = z.object({
  question: z.string().describe('The exam question.'),
  correctAnswer: z.string().describe('The correct answer to the question.'),
  userAnswer: z.string().describe('The user provided answer.'),
  isCorrect: z.boolean().describe('Whether the user answer is correct.'),
  topic: z.string().describe('The topic of the question in the course.'),
});

const GenerateExamAndAnalyzeOutputSchema = z.object({
  exam: z.array(ExamQuestionSchema).describe('The generated exam.'),
  results: z.array(ExamResultSchema).describe('The graded exam results.'),
  topicsToReview: z
    .array(z.string())
    .describe('The topics the user needs to review.'),
  extraReadings: z
    .array(z.object({title: z.string(), url: z.string()}))
    .describe('Links and articles for extra readings.'),
});

export type GenerateExamAndAnalyzeOutput = z.infer<
  typeof GenerateExamAndAnalyzeOutputSchema
>;

export async function generateExamAndAnalyze(
  input: GenerateExamAndAnalyzeInput
): Promise<GenerateExamAndAnalyzeOutput> {
  return generateExamAndAnalyzeFlow(input);
}

const generateExamPrompt = ai.definePrompt({
  name: 'generateExamPrompt',
  input: {schema: GenerateExamAndAnalyzeInputSchema},
  output: {schema: z.array(ExamQuestionSchema)},
  prompt: `You are an expert in education and creating effective exams.
  Based on the provided course material, generate an exam with multiple-choice questions.
  The exam should have {{{numberOfQuestions}}} questions.
  Each question should have 4 options, and only one correct answer.
  Also add the topic of the course that the question is related to.

  Course Material: {{{courseMaterial}}}`,
});

const gradeExamPrompt = ai.definePrompt({
  name: 'gradeExamPrompt',
  input: {schema: z.object({
    exam: z.array(ExamQuestionSchema),
    userAnswers: z.array(z.string()),
  })},
  output: {schema: z.array(ExamResultSchema)},
  prompt: `You are an expert in grading exams.
  Based on the provided exam questions and user answers, grade the exam.
  Mark if the user answer is correct or not.
  Also indicate the topic of the course that the question is related to.

  Exam Questions: {{{exam}}}
  User Answers: {{{userAnswers}}}`,
});

const analyzeResultsPrompt = ai.definePrompt({
  name: 'analyzeResultsPrompt',
  input: {schema: z.object({
    exam: z.array(ExamQuestionSchema),
    results: z.array(ExamResultSchema),
  })},
  output: {schema: z.array(z.string())},
  prompt: `You are an expert in education and analyzing exam results.
  Based on the exam results, identify the topics the user needs to review.
  Return a list of topics the user needs to review.

  Exam Questions: {{{exam}}}
  Exam Results: {{{results}}}`,
});

const generateExamAndAnalyzeFlow = ai.defineFlow(
  {
    name: 'generateExamAndAnalyzeFlow',
    inputSchema: GenerateExamAndAnalyzeInputSchema,
    outputSchema: GenerateExamAndAnalyzeOutputSchema,
  },
  async input => {
    const examQuestions = await generateExamPrompt(input);

    // Mock user answers for testing purposes.
    const userAnswers = examQuestions.map((question, index) => {
      return question.options[index % 4]; // Select a different option for each question
    });

    const gradeExamInput = {
      exam: examQuestions,
      userAnswers: userAnswers,
    };

    const examResults = await gradeExamPrompt(gradeExamInput);

    const analyzeResultsInput = {
      exam: examQuestions,
      results: examResults,
    };

    const topicsToReview = await analyzeResultsPrompt(analyzeResultsInput);

    // Get extra readings for the topics to review
    const extraReadings = [];
    for (const topic of topicsToReview) {
      const articles = await searchArticles(topic);
      extraReadings.push(...articles);
    }

    return {
      exam: examQuestions,
      results: examResults,
      topicsToReview: topicsToReview,
      extraReadings: extraReadings,
    };
  }
);
